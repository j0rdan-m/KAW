name: build
on:
  push:
    branches:
      - master
  pull_request:
permissions: 
  contents: read
  security-events: write
jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
          pip install pyyaml requests

      - name: Scan playbooks for CVEs
        run: |
          python3 <<EOF
          import yaml
          import requests
          import glob
          import os

          def check_vulnerability(package, version):
              print(f"Checking {package} version {version} for vulnerabilities...")
              try:
                  response = requests.get(f'https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch={package}%20{version}')
                  response.raise_for_status()
                  data = response.json()
                  if data['totalResults'] > 0:
                      return data['vulnerabilities']
                  else:
                      print(f"  No known vulnerabilities found for {package} version {version}")
                      return []
              except requests.exceptions.RequestException as e:
                  print(f"Error checking vulnerabilities: {e}")
                  return []
              except ValueError:
                  print(f"Error decoding JSON response for {package} version {version}")
                  return []

          def scan_playbook(file_path):
              print(f"\nScanning {file_path}")
              with open(file_path, 'r') as file:
                  playbook = yaml.safe_load(file)
              
              vulnerabilities_found = []
              for play in playbook:
                  if 'tasks' in play:
                      for task in play['tasks']:
                          if isinstance(task, dict):
                              for manager in ['apt', 'winget', 'win_chocolatey', 'npm', 'pip']:
                                  if manager in task:
                                      package = task[manager].get('name', '')
                                      version = task[manager].get('version', '')
                                      if package and version:
                                          found_vulnerabilities = check_vulnerability(package, version)
                                          for vulnerability in found_vulnerabilities:
                                              vulnerabilities_found.append({
                                                  "package": package,
                                                  "version": version,
                                                  "file": file_path,
                                                  "severity": "warning",
                                                  "message": f"Potential vulnerability found for {package} version {version}",
                                              })

              return vulnerabilities_found

          def generate_markdown(vulnerabilities):
              markdown_content = "# Vulnerability Report\n\n"
              if not vulnerabilities:
                  markdown_content += "No vulnerabilities found.\n"
              else:
                  markdown_content += "| Package | Version | File | Severity | Message |\n"
                  markdown_content += "| ------- | ------- | ---- | -------- | ------- |\n"
                  for vuln in vulnerabilities:
                      markdown_content += f"| {vuln['package']} | {vuln['version']} | {vuln['file']} | {vuln['severity']} | {vuln['message']} |\n"
              
              with open('vulnerability_report.md', 'w') as md_file:
                  md_file.write(markdown_content)

          playbook_files = glob.glob('*.yml')
          all_vulnerabilities = []

          if not playbook_files:
              print("No playbook files found in the playbooks directory.")
          else:
              for playbook_file in playbook_files:
                  vulnerabilities = scan_playbook(playbook_file)
                  all_vulnerabilities.extend(vulnerabilities)

          # Generate Markdown report if there are vulnerabilities
          generate_markdown(all_vulnerabilities)
          print("Markdown report generated: vulnerability_report.md")
          EOF

      - name: Upload Markdown report as artifact
        uses: actions/upload-artifact@v2
        with:
          name: vulnerability-report
          path: vulnerability_report.md

      # 1. Scanner de vulnérabilités avec Trivy
      - name: Run Trivy vulnerability scanner in FS mode - table logs
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          hide-progress: false
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: Run Trivy vulnerability scanner in FS mode - sarif mode
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          hide-progress: false
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: Debug SARIF files
        continue-on-error: true
        run: ls -l . && cat trivy-results.sarif || echo "No trivy-results.sarif file"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

          
      # 2. Analyse de sécurité avec Semgrep
      - name: Install Sempgrp
        run: |
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
          pipx install semgrep
      - name: Run Semgrep
        continue-on-error: true
        run: |
          semgrep scan --verbose --sarif --output semgrep-results.sarif --config auto .
  
      - name: Debug SARIF files
        continue-on-error: true
        run: ls -l . && cat semgrep-results.sarif || echo "No semgrep-results.sarif file"
        
      - name: Upload Semgrep SARIF Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif

      # 3. Analyse de qualité et de bonnes pratiques avec Ansible Lint
      - name: Install Ansible Lint
        run: sudo apt-get update && sudo apt-get install -y ansible-lint
      - name: Run Ansible Lint
        continue-on-error: true
        run: ansible-lint .

      # 4. Analyse avec Checkov
      - name: Run Checkov scan
        continue-on-error: true
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: ansible
          output_format: sarif
          output_file_path: checkov-results

      - name: Debug SARIF files
        continue-on-error: true
        run: ls -l . && cat checkov-results/results_sarif.sarif || echo "No checkov-results/results_sarif.sarif file" 

      # Upload des résultats dans GitHub Security
      - name: Upload Checkov SARIF Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results/results_sarif.sarif

      # 5. Analyse avec Checkov
      - name: Run KICS Scan
        continue-on-error: true
        uses: Checkmarx/kics-github-action@v1.7.0
        with:
          path: '.'
          output_formats: sarif
          output_path: kics-results
          platform: ansible
          fail_on: high
          disable_secrets: true
          type: ansible

      - name: Debug SARIF files
        continue-on-error: true
        run: ls -l . && cat kics-results/results.sarif || echo "No kics-results/results.sarif file"
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: kics-results/results.sarif
