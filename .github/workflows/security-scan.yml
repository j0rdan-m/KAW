name: build
on:
  push:
    branches:
      - master
  pull_request:
permissions: 
  contents: read
  security-events: write
jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          pip install ansible-lint
          pip install pyyaml requests
      
      - name: Run ansible-lint
        run: ansible-lint your_playbook.yml
      
      - name: Scan playbook for CVEs
        run: |
          python <<EOF
          import yaml
          import requests
          
          # Load and parse the Ansible playbook
          with open('your_playbook.yml', 'r') as file:
              playbook = yaml.safe_load(file)
          
          # Extract software versions (this is a simplified example)
          versions = []
          for task in playbook[0]['tasks']:
              if 'apt' in task:
                  versions.append(task['apt']['name'])
          
          # Check versions against NVD (simplified)
          for version in versions:
              response = requests.get(f'https://services.nvd.nist.gov/rest/json/cves/1.0?keyword={version}')
              if response.json()['totalResults'] > 0:
                  print(f"Potential vulnerability found for {version}")
          EOF

      # 1. Scanner de vulnérabilités avec Trivy
      - name: Run Trivy vulnerability scanner in FS mode - table logs
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          hide-progress: false
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: Run Trivy vulnerability scanner in FS mode - sarif mode
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          hide-progress: false
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '1'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: Debug SARIF files
        continue-on-error: true
        run: ls -l . && cat trivy-results.sarif || echo "No trivy-results.sarif file"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

          
      # 2. Analyse de sécurité avec Semgrep
      - name: Install Sempgrp
        run: |
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
          pipx install semgrep
      - name: Run Semgrep
        continue-on-error: true
        run: |
          semgrep scan --verbose --sarif --output semgrep-results.sarif --config auto .
  
      - name: Debug SARIF files
        continue-on-error: true
        run: ls -l . && cat semgrep-results.sarif || echo "No semgrep-results.sarif file"
        
      - name: Upload Semgrep SARIF Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif

      # 3. Analyse de qualité et de bonnes pratiques avec Ansible Lint
      - name: Install Ansible Lint
        run: sudo apt-get update && sudo apt-get install -y ansible-lint
      - name: Run Ansible Lint
        continue-on-error: true
        run: ansible-lint .

      # 4. Analyse avec Checkov
      - name: Run Checkov scan
        continue-on-error: true
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: ansible
          output_format: sarif
          output_file_path: checkov-results

      - name: Debug SARIF files
        continue-on-error: true
        run: ls -l . && cat checkov-results/results_sarif.sarif || echo "No checkov-results/results_sarif.sarif file" 

      # Upload des résultats dans GitHub Security
      - name: Upload Checkov SARIF Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results/results_sarif.sarif

      # 5. Analyse avec Checkov
      - name: Run KICS Scan
        continue-on-error: true
        uses: Checkmarx/kics-github-action@v1.7.0
        with:
          path: '.'
          output_formats: sarif
          output_path: kics-results
          platform: ansible
          fail_on: high
          disable_secrets: true
          type: ansible

      - name: Debug SARIF files
        continue-on-error: true
        run: ls -l . && cat kics-results/results.sarif || echo "No kics-results/results.sarif file"
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: kics-results/results.sarif
